generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  name              String
  email             String         @unique
  plus_credits      Int            @default(0)
  created_at        DateTime       @default(now())
  role              String         @default("volunteer") // "volunteer", "admin", "association"
  profileVisibility String         @default("public") // "public" or "private"
  events            Event[]        @relation("UserEvents")
  activities        Activity[]
  comments          Comment[]
  reactions         Reaction[]
  waitlistedEvents  Event[]        @relation("EventWaitlist")
  messages          Message[]      @relation("UserMessages")
  notifications     Notification[]
  givenRatings      Rating[]       @relation("Reviewer")
  receivedRatings   Rating[]       @relation("Reviewee")
  userBadges        UserBadge[]
  attendances       Attendance[]
}

model Association {
  id     String  @id @default(uuid())
  name   String
  events Event[]
}

model Event {
  id              String       @id @default(uuid())
  title           String
  description     String?
  location        String?
  association_id  String
  date            DateTime?
  available_slots Int          @default(0)
  impact_type     String?
  association     Association  @relation(fields: [association_id], references: [id])
  users           User[]       @relation("UserEvents")
  activities      Activity[]
  waitlist        User[]       @relation("EventWaitlist")
  messages        Message[]    @relation("EventMessages")
  ratings         Rating[] // <-- Add this line
  attendances     Attendance[]
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  userId     String
  activityId String
  user       User     @relation(fields: [userId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])
}

model Reaction {
  id         String   @id @default(uuid())
  type       String // e.g. "like", "love", "clap"
  userId     String
  activityId String
  user       User     @relation(fields: [userId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])
}

model Activity {
  id        String     @id @default(uuid())
  userId    String
  eventId   String?
  content   String
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  event     Event?     @relation(fields: [eventId], references: [id])
  comments  Comment[]
  reactions Reaction[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  senderId  String
  eventId   String
  createdAt DateTime @default(now())
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  event     Event    @relation("EventMessages", fields: [eventId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Rating {
  id         String   @id @default(uuid())
  stars      Int // 1 to 5
  comment    String?
  reviewerId String // The user giving the rating
  revieweeId String // The user receiving the rating (can be an organizer or volunteer)
  eventId    String // The event context for the rating
  createdAt  DateTime @default(now())
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewee   User     @relation("Reviewee", fields: [revieweeId], references: [id])
  event      Event    @relation(fields: [eventId], references: [id])
}

model Badge {
  id          String      @id @default(uuid())
  name        String
  description String
  iconUrl     String?
  createdAt   DateTime    @default(now())
  userBadges  UserBadge[]
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  badge     Badge    @relation(fields: [badgeId], references: [id])
}

model Attendance {
  id          String    @id @default(uuid())
  userId      String
  eventId     String
  checkedIn   Boolean   @default(false)
  checkedInAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
  event       Event     @relation(fields: [eventId], references: [id])
}
